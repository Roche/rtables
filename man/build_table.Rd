% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tt_dotabulation.R
\name{build_table}
\alias{build_table}
\title{Create a table from a layout and data}
\usage{
build_table(lyt, df, col_counts = NULL, col_total = nrow(df), ...)
}
\arguments{
\item{lyt}{layout object pre-data used for tabulation}

\item{df}{dataset (data.frame or tibble)}

\item{col_counts}{numeric (or \code{NULL}). If non-null, column counts which
override those calculated automatically during tabulation. Must specify
"counts" for \emph{all} resulting columns if non-NULL. \code{NA} elements
will be replaced with the automatically calculated counts.}

\item{col_total}{integer(1). The total observations across all columns. Defaults to \code{nrow(df)}.}

\item{\dots}{currently ignored.}
}
\description{
Layouts are used to describe a table pre-data. \code{build_rable} is used to
create a table using a layout and a dataset.
}
\note{
When overriding the column counts or totals care must be taken that, e.g.,
\code{length()} or \code{nrow()} are not called within tabulation functions, because
those will NOT give the overridden counts. Writing/using tabulation
functions which accept \code{.N_col} and \code{.N_total} or do not rely on
column counts at all (even implicitly) is the only way to ensure overriden
counts are fully respected.
}
\examples{

l <- basic_table() \%>\%
  split_cols_by("Species") \%>\%
  analyze("Sepal.Length", afun = function(x) {
  list(
    "mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
    "range" = diff(range(x))
  )
})

l

build_table(l, iris)

# analyze multiple variables
l <- basic_table() \%>\%
  split_cols_by("Species") \%>\%
  analyze(c("Sepal.Length", "Petal.Width"), afun = function(x) {
  list(
    "mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
    "range" = diff(range(x))
  )
})

build_table(l, iris)

# an example more relevant for clinical trials
l <- basic_table() \%>\%
    split_cols_by("ARM") \%>\%
    analyze("AGE", afun = function(x) {
      setNames(as.list(fivenum(x)), c("minimum", "lower-hinge", "median", "upper-hinge", "maximum"))
    })

build_table(l, DM)

build_table(l, subset(DM, AGE > 40))

# with column counts
l2 <- l \%>\%
  add_colcounts()
build_table(l2, DM)

# with manual column counts
build_table(l, DM, col_counts = 1:3)

}
\author{
Gabriel Becker
}
