% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rtabulate.R
\name{rtabulate_old.data.frame}
\alias{rtabulate_old.data.frame}
\title{Split data.frame and apply functions}
\usage{
\method{rtabulate_old}{data.frame}(
  x,
  row_by,
  col_by,
  FUN,
  ...,
  format = NULL,
  indent = 0,
  col_wise_args = NULL
)
}
\arguments{
\item{x}{data.frame}

\item{row_by}{rows to take per row}

\item{col_by}{rows to take per column

For cell in (row, column), it takes the intersection of the corresponding row_by & col_by}

\item{FUN}{a function that processes the cell data}

\item{...}{arguments passed to \code{FUN}}

\item{format}{if \code{FUN} does not return a formatted \code{\link{rcell}}
then the \code{format} is applied}

\item{indent}{deprecated.}

\item{col_wise_args}{a named list containing collections (e.g. vectors or
lists) with data elements for each column of the resulting table. The data
elements are then passed to the named argument \code{FUN} corresponding to
the element name of the outer list. Hence, the length and order of each
collection must match the levels in \code{col_by}. See examples.}
}
\value{
an \code{\link{rtable}} object
}
\description{
Split data.frame and apply functions
}
\examples{

# TODO: remove rtabulate_old
# df <- expand.grid(aaa = factor(c("A", "B")), bbb = factor(c("X", "Y", "Z")))
# df <- rbind(df, df)
# df$val <- 1:nrow(df)
# 
# rtabulate_old(
#   x = df,
#   row_by = df$aaa,
#   col_by = df$bbb,
#   FUN = function(x) {  
#      sum(x$val)
#   }
# )
# 
# rtabulate_old(
#   x = iris,
#   row_by = by_all("sum"),
#   col_by = iris$Species, 
#   FUN = function(x) sum(x$Sepal.Length)
# )
# 
# rtabulate_old(
#   x = iris,
#   row_by = iris$Species,
#   col_by = by_all("sum"), 
#   FUN = function(x) sum(x$Sepal.Length)
# )
# 
# fsl5 <- factor(iris$Sepal.Length > 5, levels = c(TRUE, FALSE),
#     labels = c("S.L > 5", "S.L <= 5"))
# 
# tbl <- rtabulate_old(
#   x = iris,
#   row_by = fsl5,
#   col_by = iris$Species, 
#   FUN = function(x_cell) {
#     if (nrow(x_cell) < 10) {
#       rcell("-")
#     } else {
#       fit <- lm(Sepal.Length ~ Petal.Width, data = x_cell)
#            
#       rcell(list(fit), format = function(x, output) {
#         paste("df:", x[[1]]$df.residual)
#       })
#     }
#   }
# )
# tbl
# 
# rtabulate_old(
#   x = iris,
#   row_by = fsl5,
#   col_by = iris$Species, 
#   FUN = function(x_cell, N) {
#      N
#   },
#   col_wise_args = list(N = c(10, 100, 200))
# )

 

}
